{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger2","table","makeTransaction","min","max","id","amount","Math","floor","random","reject","logSuccess","logError","warn","catch"],"mappings":"2LAGMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAU,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAExBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GACjC,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OACpCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAE/D,OAAOhB,QAAQC,QAAQa,IAGnBG,EAAU,SAAAH,GAAY,OAAIT,QAAQa,MAAMJ,IAE9CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAGnC,IAIME,EAAkB,SAAC,GAAmB,IAJTC,EAAKC,EAIbC,EAAiB,EAAjBA,GACnBxB,GADoC,EAAbyB,OAJIH,EAKO,IALFC,EAKO,IAJtCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIpB,SAAQ,SAACC,EAAS0B,GAC3BzB,YAAW,WACUsB,KAAKE,SAAW,GAEjCzB,EAAQ,CAAEqB,KAAIxB,UAEd6B,EAAOL,KAERxB,OAID8B,EAAa,SAAC,GAAkB,IAAhBN,EAAgB,EAAhBA,GAAIxB,EAAY,EAAZA,MACxBO,QAAQC,IAAR,eAA2BgB,EAA3B,iBAA8CxB,EAA9C,OAGI+B,EAAW,SAAAP,GACfjB,QAAQyB,KAAR,gCAA6CR,EAA7C,8BAGFH,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOhB,KAAKqB,GAAYG,MAAMF,GAChEV,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOhB,KAAKqB,GAAYG,MAAMF,GAChEV,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,KAAMhB,KAAKqB,GAAYG,MAAMF,GAC/DV,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOhB,KAAKqB,GAAYG,MAAMF,K","file":"main.13df8d281f4d445152ef.js","sourcesContent":["import './styles.scss';\r\n\r\n// -------------------------  1  ---------------------------------\r\nconst delay = ms => {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms);\r\n  });\r\n};\r\n\r\nconst logger1 = time => console.log(`Resolved after ${time}ms`);\r\n\r\ndelay(2000).then(logger1); // Resolved after 2000ms\r\ndelay(1000).then(logger1); // Resolved after 1000ms\r\ndelay(1500).then(logger1); // Resolved after 1500ms\r\n\r\n// -------------------------  2  ---------------------------------\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n  return Promise.resolve(updatedUsers);\r\n};\r\n\r\nconst logger2 = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger2);\r\ntoggleUserState(users, 'Lux').then(logger2);\r\n\r\n// -------------------------  3  ---------------------------------\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = ({ id, amount }) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id, delay });\r\n      } else {\r\n        reject(id);\r\n      }\r\n    }, delay);\r\n  });\r\n};\r\n\r\nconst logSuccess = ({ id, delay }) => {\r\n  console.log(`Transaction ${id} processed in ${delay}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\r\n"],"sourceRoot":""}